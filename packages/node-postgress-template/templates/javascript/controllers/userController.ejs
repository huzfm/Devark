import pkg from "@prisma/client";
const { PrismaClient } = pkg;

const prisma = new PrismaClient();

// ✅ Create User
export const createUser = async (req, res) => {
try {
const { name, email } = req.body;
const user = await prisma.user.create({
data: { name, email },
});
res.status(201).json(user);
} catch (error) {
res.status(400).json({ error: error.message });
}
};

// ✅ Read All Users
export const getUsers = async (req, res) => {
try {
const users = await prisma.user.findMany();
res.json(users);
} catch (error) {
res.status(500).json({ error: error.message });
}
};

// ✅ Read One User by ID
export const getUserById = async (req, res) => {
try {
const { id } = req.params;
const user = await prisma.user.findUnique({
where: { id: parseInt(id) },
});
if (!user) return res.status(404).json({ error: "User not found" });
res.json(user);
} catch (error) {
res.status(500).json({ error: error.message });
}
};

// ✅ Update User
export const updateUser = async (req, res) => {
try {
const { id } = req.params;
const { name, email } = req.body;
const user = await prisma.user.update({
where: { id: parseInt(id) },
data: { name, email },
});
res.json(user);
} catch (error) {
res.status(400).json({ error: error.message });
}
};

// ✅ Delete User
export const deleteUser = async (req, res) => {
try {
const { id } = req.params;
await prisma.user.delete({
where: { id: parseInt(id) },
});
res.json({ message: "User deleted successfully" });
} catch (error) {
res.status(400).json({ error: error.message });
}
};